Directory Structure:

.
  docker-compose.yaml
  package.json
  src
    index.js
    resources
      css
        study.css
        style.css
      js
        script.js
        study.js
    views
      layouts
        main.hbs
      pages
        create.hbs
        home.hbs
        login.hbs
        logout.hbs
        quiz.hbs
        register.hbs
        study.hbs
      partials
        footer.hbs
        header.hbs
        message.hbs
        nav.hbs
        title.hbs
  summary.txt
  test
    server.spec.js

File Contents:


    
    
    File: ./docker-compose.yaml
version: '3.9'
services:
  db:
    image: postgres:14
    env_file: .env
    expose:
      - '5432'
    volumes:
      - group-project:/var/lib/postgresql/data
      - ./src/init_data:/docker-entrypoint-initdb.d
  web:
    image: node:lts
    user: 'node'
    working_dir: /repository
    env_file: .env
    environment:
      - NODE_ENV=development
    depends_on:
      - db
    ports:
      - '3000:3000'
    volumes:
      - ./:/repository
    command: 'npm start'
volumes:
  group-project:

    
    
    File: ./package.json
{
  "name": "LearnMaster",
  "main": "src/index.js",
  "dependencies": {
    "express": "^4.6.1",
    "pg-promise": "^10.11.1",
    "body-parser": "1.20.0",
    "express-session": "1.17.3",
    "express-handlebars": "^7.1.2",
    "handlebars": "^4.7.8",
    "axios": "^1.1.3",
    "bcrypt": "^5.1.0",
    "passport": "^0.4.1",
    "passport-google-oauth": "^2.0.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.7",
    "mocha": "^6.2.2",
    "chai": "^4.2.0",
    "chai-http": "^4.3.0",
    "npm-run-all": "^4.1.5"
  },
  "scripts": {
    "prestart": "npm install",
    "start": "nodemon index.js",
    "test": "mocha",
    "testandrun": "npm run prestart && npm run test && npm start"
  }
}


    
    
    File: ./src/index.js
// *****************************************************
// <!-- Section 1 : Import Dependencies -->
// *****************************************************

const express = require('express'); // To build an application server or API
const app = express();
const handlebars = require('express-handlebars');
const Handlebars = require('handlebars');
const path = require('path');
const pgp = require('pg-promise')(); // To connect to the Postgres DB from the node server
const bodyParser = require('body-parser');
const session = require('express-session'); // To set the session object. To store or access session data, use the `req.session`, which is (generally) serialized as JSON by the store.
const bcrypt = require('bcrypt'); //  To hash passwords
const axios = require('axios'); // To make HTTP requests from our server. We'll learn more about it in Part C.

app.use(express.static(__dirname + '/resources'));
// *****************************************************
// <!-- Section 2 : Connect to DB -->
// *****************************************************

// create `ExpressHandlebars` instance and configure the layouts and partials dir.
const hbs = handlebars.create({
  extname: 'hbs',
  layoutsDir: __dirname + '/views/layouts',
  partialsDir: __dirname + '/views/partials',
});

const dbConfig = {
  host: 'db', // the database server
  port: 5432, // the database port
  database: process.env.POSTGRES_DB, // the database name
  user: process.env.POSTGRES_USER, // the user account to connect with
  password: process.env.POSTGRES_PASSWORD, // the password of the user account
};

const db = pgp(dbConfig);

// test your database
db.connect()
  .then(obj => {
    console.log('Database connection successful'); // you can view this message in the docker compose logs
    obj.done(); // success, release the connection;
  })
  .catch(error => {
    console.log('ERROR:', error.message || error);
  });

// *****************************************************
// <!-- Section 3 : App Settings -->
// *****************************************************

// Register `hbs` as our view engine using its bound `engine()` function.
app.engine('hbs', hbs.engine);
app.set('view engine', 'hbs');
app.set('views', path.join(__dirname, 'views'));
app.use(bodyParser.json()); // specify the usage of JSON for parsing request body.

// initialize session variables
app.use(
  session({
    secret: process.env.SESSION_SECRET,
    saveUninitialized: false,
    resave: false,
  })
);

app.use(
  bodyParser.urlencoded({
    extended: true,
  })
);

// *****************************************************
// <!-- Section 4 : API Routes -->
// *****************************************************

// TODO - Include your API routes here
app.get('/', (req, res) => {
    res.redirect('/login');
});

// test API route
app.get('/welcome', (req, res) => {
  res.json({status: 'success', message: 'Welcome!'});
});

app.get('/quiz', (req, res) => {
  res.render('pages/quiz');
});


app.get('/register', (req, res) => {
  res.render('pages/register');
});
app.get('/create', (req, res) => {
  // Render the create page (assuming you have a create.hbs file in your views directory)
  res.render('pages/create'); // Assuming you're using Handlebars as your template engine
});

app.get('/study', (req, res) => {
    res.render('pages/study');
});

app.post('/register', async (req, res) => {
  try{
    //hash the password using bcrypt library
    const hash = await bcrypt.hash(req.body.password, 10);
    const username = req.body.username;
    const insert = 'INSERT INTO users (username, password) VALUES ($1, $2)';
    const values = [username, hash];

    await db.none(insert, values);

    res.redirect('/login');
  } catch (error) {
    console.error('Error during registration:', error);
    res.redirect('/register');  }    
});

app.post('/create', async (req, res) => {
  try {
    // Check if user is logged in
    if (!req.session.user) {
      return res.redirect('/login');
    }
    // Extract title and terms from the request body
    const { title, terms } = req.body;
    
    // Get the username from the session
    const username = req.session.user.username;

    // Insert the new study set into the database
    const studySetId = await db.one(
      'INSERT INTO study_sets (title, user_username) VALUES ($1, $2) RETURNING id',
      [title, username]
    );

    // Insert each term and definition into the terms table
    for (const term of terms) {
      await db.none(
        'INSERT INTO terms (term, definition, study_set_id) VALUES ($1, $2, $3)',
        [term.term, term.definition, studySetId.id]
      );
    }

    // Redirect the user to the home page after successful creation
    res.redirect('/home');
  } catch (error) {
    console.error('Error creating set:', error);
    // If an error occurs, render the create page with an error message
    res.render('pages/create', { error: 'An error occurred while creating the set.', user: req.session.user });
  }
});

app.get('/login', (req, res) => {
  res.render('pages/login');
});

app.post('/login', async (req, res) => {
  try {
      const username = req.body.username;
      const password = req.body.password;
      const user = await db.oneOrNone('SELECT * FROM users WHERE username = $1', username);
      if (!user) {
          return res.redirect('/register');
      }
      const match = await bcrypt.compare(password, user.password);
      if (!match) {
          return res.render('pages/login', { error: 'Incorrect username or password.' });
      }
      req.session.user = user;
      req.session.save();
      res.redirect('/home');
  } catch (error) {
      console.error('Error during login:', error);
      res.render('pages/login', { error: 'An error occurred. Please try again.' });
  }
});

app.get('/home', async (req, res) => {
  try {
    if (!req.session.user || !req.session.user.username) {
      // If user is not logged in or username is not defined, redirect to login page
      return res.redirect('/login');
    }
    // Fetch study sets for the current user
    const studySets = await db.any('SELECT * FROM study_sets WHERE user_username = $1', req.session.user.username);
    
    // Render the home page with study sets data
    res.render('pages/home', { studySets });
  } catch (error) {
    console.error('Error fetching study sets:', error);
    // If an error occurs, render the home page without study sets
    res.render('pages/home', { studySets: [] });
  }
});


//logout route
app.get('/logout', (req, res) => {
  req.session.destroy();
  res.render('pages/logout');
});

// Authentication Middleware.
const auth = (req, res, next) => {
  if (!req.session.user) {
    // Default to login page.
    return res.redirect('/login');
  }
  next();
};


// *****************************************************
// <!-- Section 5 : Start Server-->
// *****************************************************
// starting the server and keeping the connection open to listen for more requests
//lab 11 change
//app.listen(3000);
//to
app.use(auth);

app.listen(3000);

console.log('Server is listening on port 3000');




    
    
    File: ./src/resources/css/study.css
.container {
    max-width: 800px;
    margin: 0 auto;
    text-align: center;
}

.notecard {
    perspective: 1000px;
    margin-bottom: 20px;
}

.notecard-inner {
    position: relative;
    width: 100%;
    height: 450px;
    transition: transform 0.6s;
    transform-style: preserve-3d;
}

.notecard.flipped .notecard-inner {
    transform: rotateY(180deg);
}

.notecard-front, .notecard-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border: 1px solid #ccc;
    padding: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    word-wrap: break-word;
    overflow-wrap: break-word;
    overflow: auto;
}

.notecard-back {
    transform: rotateY(180deg);
}

#term, #definition {
    margin: 0;
    padding: 20px;
}


    
    
    File: ./src/resources/css/style.css
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body{
    background: #0001de;
}
.app {
    background: #fff;
    width: 90%;
    max-width: 600px;
    margin: 100px auto 0;
    border-radius: 10px;
    padding:30px;
}
.app h1 {
    font-size: 25px;
    color: #001e4d;
    font-weight: 600;
    border-bottom: 1px solid #333;
    padding-bottom: 30px;
}
.quiz {
    padding: 20px 0;

}
.quiz h2 {
    font-size: 18px;
    color: #001e4d;
    font-weight: 600;
}

.btn {
    background: #fff;
    color: #222;
    font-weight: 500;
    width: 100%;
    border: 1px solid #222;
    padding: 10px;
    margin: 10px 0 ;
    text-align: left;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s;
}
.btn:hover {
    background: #222;
    color: #fff;
}
#next-btn{
    background: #001e4d;
    color: #fff;
    font-weight: 500;
    width: 150px;
    border: 0;
    padding: 10px;
    margin: 20px auto 0;
    border-radius: 4px;
    cursor: pointer;
    display: none;
}

.btn.correct{
    background: #9aeabc;
}
.btn.incorrect{
    background: #ff9393;
}

    
    
    File: ./src/resources/js/script.js
const questions = [
    {
        question: "Sample Question 1",
        answers: [
            {text: "False Answer", correct: false},
                
            {text: "True Answer", correct: true},
            {text: "False Answer", correct: false},
            {text: "False Answer", correct: false},
        ]
            },
        {
            question: "Sample Question 2",
            answers: [
                {text: "False Answer", correct: false},
                    
                {text: "True Answer", correct: true},
                {text: "False Answer", correct: false},
                {text: "False Answer", correct: false},
            ]
    },
    {
    question: "Sample Question 3",
    answers: [
        {text: "False Answer", correct: false},    
        {text: "False Answer", correct: false},
        {text: "True Answer", correct: true},
        {text: "False Answer", correct: false},
    ]
},
{
    question: "Sample Question 4",
    answers: [
        {text: "False Answer", correct: false},
        {text: "False Answer", correct: false},
        {text: "False Answer", correct: false},
        {text: "True Answer", correct: true},
    ]
}

];

const questionElement = document.getElementById("question");
const answerButtons = document.getElementById("answer-buttons");
const nextButton = document.getElementById("next-btn");

let currentQuestionIndex = 0;
let score = 0;

function startQuiz() {
    currentQuestionIndex = 0;
    score = 0;
    nextButton.innerHTML = "Next";
    showQuestion();
}

function showQuestion() {
    resetState();
    let currentQuestion = questions[currentQuestionIndex];
    let questionNo = currentQuestionIndex + 1;
    questionElement.innerHTML = questionNo + ". " + currentQuestion.question;

    currentQuestion.answers.forEach(answer => {
        const button = document.createElement("button");
        button.innerHTML = answer.text;
        button.classList.add("btn");
        answerButtons.appendChild(button);
        if(answer.correct) {
            button.dataset.correct = answer.correct;
        }
        button.addEventListener("click", selectAnswer);
    });
}


function resetState() {
    nextButton.style.display = "none";
    while(answerButtons.firstChild) {
        answerButtons.removeChild(answerButtons.firstChild);
    }
}

function selectAnswer(event) {
    const selectedBtn = event.target;
    const isCorrect = selectedBtn.dataset.correct == "true";
    if(isCorrect){
        selectedBtn.classList.add("correct");
        score++;

    } else {
        selectedBtn.classList.add("incorrect");
    }
    Array.from(answerButtons.children).forEach(button => {
        if(button.dataset.correct == "true") {
            button.classList.add("correct");

        }
        button.disabled = true;

    });
    nextButton.style.display = "block";
}
function showScore(){
    resetState();
    questionElement.innerHTML = `You scored ${score} out of ${questions.length}!`;
    nextButton.innerHTML = "Try Again";
    nextButton.style.display = "block";
}   
function handleNextButton() {
    currentQuestionIndex++;
    if(currentQuestionIndex < questions.length){
        showQuestion();
    }else{
        showScore();
    }
}


nextButton.addEventListener("click", ()=> {
    if(currentQuestionIndex < questions.length) {
        handleNextButton();
    }else {
        startQuiz();
    }
    });
startQuiz();

    
    
    File: ./src/resources/js/study.js
const notecards = [
    { term: 'Term 1', definition: 'Definition 1' },
    { term: 'Term 2', definition: 'Definition 2' },
    { term: 'Term 3', definition: 'Definition 3' },
    { term: 'Term 4', definition: 'Definition 4' }
];

let currentIndex = 0;

const termElement = document.getElementById('term');
const definitionElement = document.getElementById('definition');
const notecardElement = document.querySelector('.notecard');
const nextButton = document.getElementById('next-btn');

function calculateFontSize(text) {
    const length = text.length;
    if (length <= 50) {
        return '24px';
    } else if (length <= 100) {
        return '20px';
    } else if (length <= 150) {
        return '16px';
    } else {
        return '14px';
    }
}

function showCurrentCard() {
    const currentCard = notecards[currentIndex];
    termElement.textContent = currentCard.term;
    definitionElement.textContent = currentCard.definition;

    const termFontSize = calculateFontSize(currentCard.term);
    const definitionFontSize = calculateFontSize(currentCard.definition);
    termElement.style.fontSize = termFontSize;
    definitionElement.style.fontSize = definitionFontSize;
}

function showNextCard() {
    currentIndex = (currentIndex + 1) % notecards.length;
    showCurrentCard();
    notecardElement.classList.remove('flipped');
}

notecardElement.addEventListener('click', () => {
    notecardElement.classList.toggle('flipped');
});

nextButton.addEventListener('click', showNextCard);

showCurrentCard();


    
    
    File: ./src/views/layouts/main.hbs
<!-- TODO: Add the head.hbs partial here -->
{{> header}}
<!-- TODO: Add the nav.hbs partial here -->
{{> nav}}
{{{body}}}
<!-- TODO: Add the footer.hbs partial here -->
{{> footer}}

    
    
    File: ./src/views/pages/create.hbs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Set and Upload Terms</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h2 {
            margin-top: 0;
        }
        input[type="file"] {
            margin-bottom: 10px;
        }
        #terms-list {
            list-style: none;
            padding: 0;
        }
        #terms-list li {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
<div class="container">
    <h2>Create Set</h2>
    <form id="create-form" action="/create" method="POST">
        <label for="setTitle">Set Title:</label>
        <input type="text" id="setTitle" name="title" required>
        <br>
        <div id="terms-container">
            <div class="term-input">
                <label for="term1">Term:</label>
                <input type="text" id="term1" name="term" required>
                <br>
                <label for="definition1">Definition:</label>
                <textarea id="definition1" name="definition" required></textarea>
                <br>
            </div>
        </div>
        <button type="button" onclick="addTerm()">Add Term</button>
        <button type="submit">Create Set</button>
    </form>
</div>

<script>
    let termCount = 1;

    function addTerm() {
        termCount++;
        const termsContainer = document.getElementById('terms-container');
        const termInput = document.createElement('div');
        termInput.classList.add('term-input');
        termInput.innerHTML = `
            <label for="term${termCount}">Term:</label>
            <input type="text" id="term${termCount}" name="term" required>
            <br>
            <label for="definition${termCount}">Definition:</label>
            <textarea id="definition${termCount}" name="definition" required></textarea>
            <br>
        `;
        termsContainer.appendChild(termInput);
    }

    document.getElementById('create-form').addEventListener('submit', function(event) {
        event.preventDefault();
        const form = this;
        const formData = new FormData(form);
        const terms = [];
        for (let i = 1; i <= termCount; i++) {
            terms.push({
                term: document.getElementById(`term${i}`).value,
                definition: document.getElementById(`definition${i}`).value
            });
        }
        formData.append('terms', JSON.stringify(terms));
        fetch(form.action, {
            method: form.method,
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(responseText => {
            console.log(responseText);
            alert('Set successfully created!');
            window.location.href = '/home';
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
            form.querySelector('.error').textContent = 'An error occurred. Please try again.';
        });
    });
</script>
</body>
</html>



<!--
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Create Set and Upload Terms</title>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }
    .container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    h2 {
        margin-top: 0;
    }
    input[type="file"] {
        margin-bottom: 10px;
    }
    #terms-list {
        list-style: none;
        padding: 0;
    }
    #terms-list li {
        margin-bottom: 10px;
    }
</style>
</head>
<body>
<div class="container">
    <h2>Create Set</h2>
    <form id="create-form" action="/create" method="POST">
        <label for="setTitle">Set Title:</label>
        <input type="text" id="setTitle" name="setTitle" required>
        <br>
        <div id="terms-container">
            <div class="term-input">
                <label for="term1">Term:</label>
                <input type="text" id="term1" name="term" required>
                <br>
                <label for="definition1">Definition:</label>
                <textarea id="definition1" name="definition" required></textarea>
                <br>
            </div>
        </div>
        <button type="button" onclick="addTerm()">Add Term</button>
        <button type="submit">Create Set</button>
    </form>
</div>

<div class="container">
    <h2>Upload Terms</h2>
    <input type="file" id="file-input" accept=".txt">
    <button onclick="uploadFile()">Upload</button>
    <ul id="terms-list"></ul>
</div>

<script>
    let termCount = 1;

    function addTerm() {
        termCount++;
        const termsContainer = document.getElementById('terms-container');
        const termInput = document.createElement('div');
        termInput.classList.add('term-input');
        termInput.innerHTML = `
            <label for="term${termCount}">Term:</label>
            <input type="text" id="term${termCount}" name="term" required>
            <br>
            <label for="definition${termCount}">Definition:</label>
            <textarea id="definition${termCount}" name="definition" required></textarea>
            <br>
        `;
        termsContainer.appendChild(termInput);
    }

    function uploadFile() {
        const fileInput = document.getElementById('file-input');
        const fileList = fileInput.files;
        
        if (fileList.length === 0) {
            alert('Please select a file to upload.');
            return;
        }
        
        const file = fileList[0];
        const reader = new FileReader();
        
        reader.onload = function(event) {
            const content = event.target.result;
            const terms = content.split('\n');
            
            const termsList = document.getElementById('terms-list');
            termsList.innerHTML = '';
            
            terms.forEach(term => {
                const parts = term.split(':');
                if (parts.length === 2) {
                    const termName = parts[0].trim();
                    const termDefinition = parts[1].trim();
                    const listItem = document.createElement('li');
                    listItem.textContent = `${termName}: ${termDefinition}`;
                    termsList.appendChild(listItem);
                }
            });
        };
        
        reader.readAsText(file);
    }

    document.getElementById('create-form').addEventListener('submit', function(event) {
        event.preventDefault();
        alert('Set successfully created!');
        this.submit();
    });
</script>
</body>
</html>
-->

    
    
    File: ./src/views/pages/home.hbs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LearnMaster</title>
</head>
<body>

<!-- Button to create a new study set -->
<a href="/create">Create New Study Set</a>

<!-- Check if studySets array exists and has length -->
{{#if studySets.length}}
  <!-- List of study set titles -->
  <ul>
    {{#each studySets}}
    <!--
      {{#if this.title}}
        <li>{{this.title}}</li>
      {{/if}}
      -->
    <li>{{this.title}}</li>
    {{/each}}
  </ul>
{{else}}
  <p>No study sets created yet.</p>
{{/if}}


</body>
</html>


    
    
    File: ./src/views/pages/login.hbs
<form action="/login" method="POST">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <h1>Log In</h1>
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" class="form-control"><br>
        <label for="password">Password:</label><br>
        <input type="text" id="password" name="password" class="form-control"><br><br>
        <input type="submit" value="Login" class="btn btn-primary btn-block">
        <p class="mt-3 text-center">Not registered yet? <a href="/register">Register here</a>.</p>
      </div>
    </div>
</form>

{{> message}}

    
    
    File: ./src/views/pages/logout.hbs
<!DOCTYPE html>
<html lang="en" class="h-100">
    <div class="container">
        <b style="font-size:5vw">Logged out successfully!</b>
    </div>
</html>

    
    
    File: ./src/views/pages/quiz.hbs
<!DOCTYPE html>
<html>
    <head>
        <title>Quiz</title>
        <link href="/css/style.css" rel="stylesheet">

    </head>
    <body>
        <div class="app">
            <h1>Interactive Quiz</h1>
            <div class="quiz">
                <h2 id="question">Question</h2>
                <div id="answer-buttons">
                    <button class="btn">Answer 1</button>
                    <button class="btn">Answer 2</button>
                    <button class="btn">Answer 3</button>
                    <button class="btn">Answer 4</button>
                </div>
                <button id="next-btn">Next</button>
            </div>

        </div>
<script src="\js\script.js"></script>
    </body>
</html>

    
    
    File: ./src/views/pages/register.hbs
<form action="/register" method="POST">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <h1>Register</h1>
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" class="form-control"><br>
        <label for="password">Password:</label><br>
        <input type="text" id="password" name="password" class="form-control"><br><br>
        <input type="submit" value="Register" class="btn btn-primary btn-block">
        <p class="mt-3 text-center">If you already have an account, <a href="/login">click here to login</a>.</p>
        <p class="mt-3 text-center">QUIZ TEST <a href="/quiz">CLICK TO TEST QUIZ</a>.</p>
      </div>
    </div>
</form>


    
    
    File: ./src/views/pages/study.hbs
<!DOCTYPE html>
<html>
<head>
    <title>Study</title>
    <link href="/css/study.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1>Study Notecards</h1>
        <div class="notecard">
            <div class="notecard-inner">
                <div class="notecard-front">
                    <p id="term">Term</p>
                </div>
                <div class="notecard-back">
                    <p id="definition">Definition</p>
                </div>
            </div>
        </div>
        <button id="next-btn">Next</button>
    </div>
    <script src="/js/study.js"></script>
</body>
</html>


    
    
    File: ./src/views/partials/footer.hbs
<footer class="text-center text-muted w-100 mt-auto fixed-bottom">
    <script>https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js</script>
    <p>
        &copy; Copyright 2024 LearnMaster
    </p>
</footer>
</body>
</html>


    
    
    File: ./src/views/partials/header.hbs
<!DOCTYPE html>
<html lang="en" class="h-100">
<head>
  <meta charset="UTF-8" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1, shrink-to-fit=no"
  />
  <meta name="description" content="" />

  <!-- TODO: Include the `title` partial here -->
  {{> title}}

      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

</head>
<body class="h-100 d-flex flex-column">

    
    
    File: ./src/views/partials/message.hbs
{{#if message}}
  <div class="alert alert-{{#if error}}danger{{else}}success{{/if}}" role="alert">
    {{ message }}
  </div>
{{/if}}

    
    
    File: ./src/views/partials/nav.hbs
<!--

<header>
 <nav class="navbar navbar-expand-sm border-bottom">
   <div class="container">
     <button
       class="navbar-toggler ms-auto"
       type="button"
       data-bs-toggle="collapse"
       data-bs-target="#navbar-collapse"
       aria-controls="navbar"
       aria-expanded="false"
       aria-label="Toggle navigation">
       <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbar-collapse">
       <div class="nav-item me-1">
         < TODO: For Logout, add a <a> tag with an attribute href to call the '/logout API -->
          <!-- nav branch commit 
            <a class="nav-link">
                Logout
            </a>
       </div>
     </div>
   </div>
 </nav>
</header>
-->


<header>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2">
      <a class="navbar-brand" href="/"></a>
      <ul class="navbar-nav mr-auto">
        <li class="nav-item">
            <a class="nav-link" href="/home">Home</a>
        </li>
        <li class="nav-item">
    	    <a class="nav-link" href="/study">Study</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/login">Login</a>
        </li>

        <!-- Study sets once implemented
        <li class="nav-item">
            <a class="nav-link" href="../pages/........">Study Sets</a>
        </li>
        -->
        
        <li class="nav-item">

            <a class="nav-link" href="/logout">Log out</a>

        </li>
        
      </ul>
    </div>

    <!--
    <div class="navbar-collapse collapse order-3 dual-collapse2">
      <ul class="navbar-nav ml-auto">
          <li class="nav-item">
              <a class="nav-link" href="#">
              <! TODO: Add the email id which is passed using: {{ variable_name }}. This will display the email id on the top right corner of the page 
                {{ email }}
              </a>
          </li>
      </ul>
    </div>
    -->
  </nav>
</header>


    
    
    File: ./src/views/partials/title.hbs
{{#if first_name}}
  <title> {{first_name}} - CSCI 3308 Lab 8 </title>
  {{else}}
  <title> LearnMaster </title>
{{/if}}

    
    
    File: ./summary.txt


    
    
    File: ./test/server.spec.js
// ********************** Initialize server **********************************

const server = require('../src/index'); //TODO: Make sure the path to your index.js is correctly added

// ********************** Import Libraries ***********************************

const chai = require('chai'); // Chai HTTP provides an interface for live integration testing of the API's.
const chaiHttp = require('chai-http');
chai.should();
chai.use(chaiHttp);
const {assert, expect} = chai;

// ********************** DEFAULT WELCOME TESTCASE ****************************

/*
describe('Server!', () => {
  // Sample test case given to test / endpoint.
  it('Returns the default welcome message', done => {
    chai
      .request(server)
      .get('/welcome')
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.body.status).to.equals('success');
        assert.strictEqual(res.body.message, 'Welcome!');
        done();
      });
  });
});
*/

// *********************** TODO: WRITE 2 UNIT TESTCASES **************************


//We are checking POST /add_user API by passing the user info in in incorrect manner (name cannot be an integer). This test case should pass and return a status 400 along with a "Invalid input" message.

/*
describe('Testing Add User API', () => {
  it('positive : /register', done => {
    chai
      .request(server)
      .post('/register')
      .send({username: 'Test User2', password: 'TestUserPassword2'})
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.body.message).to.equals('Success');
        done();
      });
    // Refer above for the positive testcase implementation
  });
  it('Negative : /register. Checking invalid name', done => {
    chai
      .request(server)
      .post('/register')
      .send({username: 'a'.repeat(51), password: 'userpassword'})
      .end((err, res) => {
        expect(res).to.have.status(400);
        expect(res.body.message).to.equals('Invalid input');
        done();
      });
  });
});
*/

describe('Testing Login API', () => {
  // Positive test case: Valid login
  it('Positive: /login. Valid credentials', done => {
    chai
      .request(server)
      .post('/login')
      .send({username: 'Test User2', password: 'TestUserPassword2'})
      .end((err, res) => {
        expect(res).to.have.status(200); // Assuming successful login redirects to another page
        // Add additional assertions if your login endpoint returns data
        done();
      });
  });

  // Negative test case: Invalid username
  it('Negative: /login. Invalid username', done => {
    chai
      .request(server)
      .post('/login')
      .send({username: 'non_existing_username', password: 'password123'})
      .end((err, res) => {
        expect(res).to.have.status(400); // Assuming unsuccessful login redirects to another page
        // Add additional assertions if your login endpoint returns data
        done();
      });
  });

});



// ********************************************************************************
