<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LearnMaster</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    
    <style>
        /* Some custom styles */
        .quiz-button {
            background-color: #00008B; /* Green */
            border: none;
            color: white;
            padding: 7px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            border-radius: 4px;
            padding-bottom: 9px;
            padding-top: 5px;
        }
        .container {
            margin-top: 50px;
            position: relative;
            min-height: 100vh;
        }
        .pagination-container {
            margin-top: 20px;
            margin-bottom: 60px; /* Increased margin-bottom for more space */
        }
        .pagination {
            margin: 0;
        }
        .pagination li {
            display: inline-block;
            margin-right: 10px;
        }
        .pagination li:last-child {
            margin-right: 0;
        }
        .pagination li a,
        .pagination li span {
            padding: 10px 15px;
            border: 1px solid #007bff;
            color: #007bff;
            cursor: pointer;
        }
        .pagination li.active a {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }
    </style>
</head>
<body>

<div class="container">
  <h3>Study Sets</h3>
  {{#if studySets.length}}
  <table class="table">
    <thead>
      <tr>
        <th>Set Name</th>
        <th class="text-right"></th>
      </tr>
    </thead>
   <tbody id="studySetBody">
  {{#each studySets}}
  <tr>
    <td class="text-left">
      <p> {{this.title}} </p>
    </td>
    <td class="text-right">
      <a href="/study/{{this.id}}" class="btn btn-success">Study</a>
      <a href="/view/{{this.id}}" class="btn btn-info">View/Edit</a>
      <a href="/quiz" class="quiz-button" role="button" data-id="{{this.id}}" data-title="{{this.title}}">Quiz</a>
      <button class="btn btn-danger delete-btn" data-id="{{this.id}}">Delete</button>
    </td>
  </tr>
  {{/each}}
  </tbody>

  </table>
  {{else}}
  <p>No study sets created yet.</p>
  {{/if}}
  <a href="/create" class="btn btn-primary mb-3">Create New Study Set</a>

  <!-- Pagination -->
  <div class="pagination-container">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center" id="pagination"></ul>
    </nav>
  </div>

</div>

<!-- Bootstrap JS and jQuery (optional) -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="/js/script.js"> </script>
<script>
    // Function to create pagination links
    function createPaginationLinks(totalPages) {
        var pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        for (var i = 1; i <= totalPages; i++) {
            var li = document.createElement('li');
            li.classList.add('page-item');

            var a = document.createElement('a');
            a.classList.add('page-link');
            a.setAttribute('href', '#');
            a.textContent = i;

            li.appendChild(a);
            pagination.appendChild(li);
        }
    }

    // Function to show study sets based on page number
    function showStudySets(pageNumber) {
        var studySets = document.getElementById('studySetBody').getElementsByTagName('tr');
        var itemsPerPage = 5;
        var totalPages = Math.ceil(studySets.length / itemsPerPage);

        // Hide all study sets
        for (var i = 0; i < studySets.length; i++) {
            studySets[i].style.display = 'none';
        }

        // Calculate start and end index of study sets for the given page number
        var startIndex = (pageNumber - 1) * itemsPerPage;
        var endIndex = Math.min(startIndex + itemsPerPage, studySets.length);

        // Show study sets for the given page number
        for (var i = startIndex; i < endIndex; i++) {
            studySets[i].style.display = '';
        }

        // Create pagination links
        createPaginationLinks(totalPages);
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Initially show study sets for the first page
        showStudySets(1);

        // Handle pagination click events
        document.getElementById('pagination').addEventListener('click', function (event) {
            if (event.target.tagName === 'A') {
                var pageNumber = parseInt(event.target.textContent);
                showStudySets(pageNumber);
            }
        });

        // Handle delete button click events
        document.getElementById('studySetBody').addEventListener('click', function (event) {
            if (event.target.classList.contains('delete-btn')) {
                var studySetId = event.target.getAttribute('data-id');
                var confirmDelete = confirm('Are you sure you want to delete this study set?');
                if (confirmDelete) {
                    // Send a DELETE request to delete the study set
                    fetch(`/delete-set/${studySetId}`, {
                        method: 'POST'
                    })
                    .then(response => {
                        if (response.ok) {
                            // Remove the corresponding row from the table
                            event.target.closest('tr').remove();
                            showStudySets(1); // Refresh the pagination after deleting a set
                        } else {
                            throw new Error('Network response was not ok');
                        }
                    })
                    .catch(error => {
                        console.error('There was a problem with the fetch operation:', error);
                    });
                }
            }
        });
    });
</script>

</body>
</html>
